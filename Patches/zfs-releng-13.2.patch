diff --git a/sys/contrib/openzfs/lib/libshare/os/freebsd/nfs.c b/sys/contrib/openzfs/lib/libshare/os/freebsd/nfs.c
index 97092bdc0..7c6594207 100644
--- a/sys/contrib/openzfs/lib/libshare/os/freebsd/nfs.c
+++ b/sys/contrib/openzfs/lib/libshare/os/freebsd/nfs.c
@@ -52,6 +52,17 @@ __FBSDID("$FreeBSD$");
 #define	MAXLINESIZE	(PATH_MAX + OPTSSIZE)
 #define	ZFS_EXPORTS_FILE	"/etc/zfs/exports"
 #define	ZFS_EXPORTS_LOCK	ZFS_EXPORTS_FILE".lock"
+#define ZFS_EXPORTSDB_FILE	"/etc/zfs/exports.db"
+
+#include <sys/types.h>
+#include <db.h>
+#include <fcntl.h>
+#include <limits.h>
+
+
+static DB *sharedb = NULL;
+static int sharedb_wrmode = 0;
+
 
 static sa_fstype_t *nfs_fstype;
 
@@ -166,13 +177,18 @@ translate_opts(const char *shareopts)
 	char *o, *s = NULL;
 	unsigned int i;
 	size_t len;
-
+	int notfirst = 0;
+	
 	strlcpy(oldopts, shareopts, sizeof (oldopts));
 	newopts[0] = '\0';
 	s = oldopts;
 	while ((o = strsep(&s, "-, ")) != NULL) {
 		if (o[0] == '\0')
 			continue;
+		if (notfirst)
+			strlcat(newopts, " ", sizeof (newopts));
+		else
+			notfirst = 1;
 		for (i = 0; known_opts[i] != NULL; i++) {
 			len = strlen(known_opts[i]);
 			if (strncmp(known_opts[i], o, len) == 0 &&
@@ -182,7 +198,9 @@ translate_opts(const char *shareopts)
 			}
 		}
 		strlcat(newopts, o, sizeof (newopts));
+#if 0
 		strlcat(newopts, " ", sizeof (newopts));
+#endif
 	}
 	return (newopts);
 }
@@ -272,11 +290,105 @@ nfs_copy_entries(char *filename, const char *mountpoint)
 	return (error);
 }
 
+static size_t
+fix_multiline(size_t size,
+	      void *data) {
+	char *buf = (char *) data;
+	char sep = 0;
+	int i = 0;
+
+	for (i = 0; i < size; i++) {
+		switch (buf[i]) {
+		case '\\':
+			if (i+1 < size)
+				++i;
+			break;
+
+		case '"':
+		case '\'':
+			if (buf[i] == sep)
+				sep = 0;
+			else
+				sep = buf[i];
+			break;
+
+		case ';':
+			if (sep)
+				++i;
+			else {
+				int j, len;
+				
+				buf[i] = '\0';
+
+				/* Remove redundant leading SPC */
+				/* XXX: Test this! */
+				for (j = i+1; j < size && isspace(buf[j]); j++)
+					;
+				len = j-(i+1);
+				if (len > 0) {
+					if (j < size)
+						memcpy(buf+i+1, buf+j, size-j+1);
+					size -= len;
+				}
+			}
+			break;
+		}
+	}
+	return size;
+}
+
 static int
 nfs_enable_share(sa_share_impl_t impl_share)
 {
-	char *filename = NULL;
 	int error;
+	char *filename = NULL;
+	char *shareopts = FSINFO(impl_share, nfs_fstype)->shareopts;
+	int res;
+
+	if (strcmp(shareopts, "on") == 0)
+		shareopts = "";
+
+	if (sharedb && !sharedb_wrmode) {
+		res = sharedb->close(sharedb);
+		if (res < 0) {
+			fprintf(stderr, "nfs_enable_share: sharedb(\"%s\")->close: %s\n", ZFS_EXPORTSDB_FILE, strerror(errno));
+			return (SA_SYSTEM_ERR);
+		}
+		sharedb = NULL;
+		sharedb_wrmode = 0;
+	}
+	if (!sharedb) {
+		sharedb = dbopen(ZFS_EXPORTSDB_FILE, O_RDWR|O_EXLOCK, 0600, DB_BTREE, NULL);
+		if (!sharedb) {
+			if (errno != ENOENT) {
+				fprintf(stderr, "nfs_enable_share: dbopen(\"%s\", O_RDWR|O_EXLOCK): %s\n",
+					ZFS_EXPORTSDB_FILE, strerror(errno));
+				return (SA_SYSTEM_ERR);
+			}
+		}
+	}
+	if (sharedb) {
+		DBT k, d;
+		
+		sharedb_wrmode = 1;
+		
+		k.data = impl_share->sa_mountpoint;
+		k.size = strlen(k.data);
+		
+		d.data = translate_opts(shareopts);
+		d.size = strlen(d.data);
+		
+		d.size = fix_multiline(d.size, d.data);
+		
+		res = sharedb->put(sharedb, &k, &d, 0);
+		if (res < 0) {
+			fprintf(stderr, "nfs_enable_share: sharedb(\"%s\")->put(\"%s\"): %s\n",
+				ZFS_EXPORTSDB_FILE, (char *) k.data, strerror(errno));
+			return (SA_SYSTEM_ERR);
+		}
+		
+		return (SA_OK);
+	}
 
 	if ((filename = nfs_init_tmpfile()) == NULL)
 		return (SA_SYSTEM_ERR);
@@ -305,9 +417,6 @@ nfs_enable_share(sa_share_impl_t impl_share)
 		nfs_exports_unlock();
 		return (SA_SYSTEM_ERR);
 	}
-	char *shareopts = FSINFO(impl_share, nfs_fstype)->shareopts;
-	if (strcmp(shareopts, "on") == 0)
-		shareopts = "";
 
 	if (fprintf(fp, "%s\t%s\n", impl_share->sa_mountpoint,
 	    translate_opts(shareopts)) < 0) {
@@ -337,6 +446,44 @@ nfs_disable_share(sa_share_impl_t impl_share)
 {
 	int error;
 	char *filename = NULL;
+	int res;
+
+	if (sharedb && !sharedb_wrmode) {
+		/* ShareDB open for ReadOnly, reopen for ReadWrite */
+		res = sharedb->close(sharedb);
+		if (res < 0) {
+			fprintf(stderr, "nfs_disable_share: sharedb(\"%s\")->close: %s\n",
+				ZFS_EXPORTSDB_FILE, strerror(errno));
+			return (SA_SYSTEM_ERR);
+		}
+		sharedb = NULL;
+		sharedb_wrmode = 0;
+	}
+	if (!sharedb) {
+		sharedb = dbopen(ZFS_EXPORTSDB_FILE, O_RDWR|O_EXLOCK, 0600, DB_BTREE, NULL);
+		if (!sharedb) {
+			if (errno != ENOENT) {
+				fprintf(stderr, "nfs_disable_share: dbopen(\"%s\", O_RDWR|O_CREAT|O_EXLOCK): %s\n", ZFS_EXPORTSDB_FILE, strerror(errno));
+				return (SA_SYSTEM_ERR);
+			}
+		}
+	}
+	if (sharedb) {
+		DBT k;
+		
+		sharedb_wrmode = 1;	
+		k.data = impl_share->sa_mountpoint;
+		k.size = strlen(k.data);
+		
+		res = sharedb->del(sharedb, &k, 0);
+		if (res < 0) {
+			fprintf(stderr, "nfs_disable_share: sharedb(\"%s\")->del(\"%s\"): %s\n",
+				ZFS_EXPORTSDB_FILE, (char *) k.data, strerror(errno));
+			return (SA_SYSTEM_ERR);
+		}
+		
+		return (SA_OK);
+	}
 
 	if ((filename = nfs_init_tmpfile()) == NULL)
 		return (SA_SYSTEM_ERR);
@@ -364,12 +511,38 @@ nfs_disable_share(sa_share_impl_t impl_share)
 static boolean_t
 nfs_is_shared(sa_share_impl_t impl_share)
 {
+	char *mntpoint = impl_share->sa_mountpoint;
 	char *s, last, line[MAXLINESIZE];
 	size_t len;
-	char *mntpoint = impl_share->sa_mountpoint;
 	size_t mntlen = strlen(mntpoint);
+	FILE *fp;
+	
+	if (!sharedb) {
+		sharedb = dbopen(ZFS_EXPORTSDB_FILE, O_RDONLY|O_SHLOCK, 0, DB_BTREE, NULL);
+		sharedb_wrmode = 0;
+		if (!sharedb && errno != ENOENT) {
+			fprintf(stderr, "dbopen(\"%s\", O_RDONLY|O_SHLOCK): %s\n",
+				ZFS_EXPORTSDB_FILE, strerror(errno));
+			return (SA_SYSTEM_ERR);
+		}
+	}
+	if (sharedb) {
+		DBT k, d;
+		int res;
+
+		k.data = mntpoint;
+		k.size = mntlen;
+		
+		res = sharedb->get(sharedb, &k, &d, 0);
+		if (res < 0)
+			fprintf(stderr, "sharedb(\"%s\")->get(\"%s\"): %s\n",
+				ZFS_EXPORTSDB_FILE, (char *) k.data, strerror(errno));
+		if (res == 0)
+			return (B_TRUE);
+		return (B_FALSE);
+	}
 
-	FILE *fp = fopen(ZFS_EXPORTS_FILE, "re");
+	fp = fopen(ZFS_EXPORTS_FILE, "re");
 	if (fp == NULL)
 		return (B_FALSE);
 
@@ -422,13 +595,27 @@ nfs_commit_shares(void)
 {
 	struct pidfh *pfh;
 	pid_t mountdpid;
+	int res = SA_OK;
+
+	if (sharedb) {
+		/* If ShareDB in use, close the database handle so any cached changes are flushed */
+		res = sharedb->close(sharedb);
+		if (res < 0) {
+			fprintf(stderr, "nfs_commit_shares: sharedb(\"%s\")->close: %s\n",
+				ZFS_EXPORTSDB_FILE, strerror(errno));
+			res = SA_SYSTEM_ERR;
+		}
+		
+		sharedb = NULL;
+		sharedb_wrmode = 0;
+	}
 
-start:
+ start:
 	pfh = pidfile_open(_PATH_MOUNTDPID, 0600, &mountdpid);
 	if (pfh != NULL) {
 		/* mountd(8) is not running. */
 		pidfile_remove(pfh);
-		return (SA_OK);
+		return res;
 	}
 	if (errno != EEXIST) {
 		/* Cannot open pidfile for some reason. */
@@ -441,7 +628,7 @@ nfs_commit_shares(void)
 	}
 	/* We have mountd(8) PID in mountdpid variable. */
 	kill(mountdpid, SIGHUP);
-	return (SA_OK);
+	return res;
 }
 
 static const sa_share_ops_t nfs_shareops = {
