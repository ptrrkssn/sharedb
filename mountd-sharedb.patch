diff --git a/usr.sbin/mountd/mountd.c b/usr.sbin/mountd/mountd.c
index d985dd00acf8..e63783b42b5b 100644
--- a/usr.sbin/mountd/mountd.c
+++ b/usr.sbin/mountd/mountd.c
@@ -73,8 +73,10 @@ __FBSDID("$FreeBSD$");
 #include <arpa/inet.h>
 
 #include <ctype.h>
+#include <db.h>
 #include <err.h>
 #include <errno.h>
+#include <fcntl.h>
 #include <grp.h>
 #include <libutil.h>
 #include <limits.h>
@@ -85,6 +87,7 @@ __FBSDID("$FreeBSD$");
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+
 #include "pathnames.h"
 #include "mntopts.h"
 
@@ -233,7 +236,7 @@ static void	free_exp(struct exportlist *);
 static void	free_grp(struct grouplist *);
 static void	free_host(struct hostlist *);
 static void	free_v4rootexp(void);
-static void	get_exportlist_one(int);
+static void	get_exportlist_one(int, DB *);
 static void	get_exportlist(int);
 static void	insert_exports(struct exportlist *, struct exportlisthead *);
 static void	free_exports(struct exportlisthead *);
@@ -288,7 +291,7 @@ static int resvport_only = 1;
 static int nhosts = 0;
 static int dir_only = 1;
 static int dolog = 0;
-static int got_sighup = 0;
+static volatile int got_sighup = 0;
 static int xcreated = 0;
 
 static char *svcport_str = NULL;
@@ -306,6 +309,9 @@ static char v4root_dirpath[PATH_MAX + 1];
 static struct exportlist *v4root_ep = NULL;
 static int has_publicfh = 0;
 static int has_set_publicfh = 0;
+static int n_scanned = 0;
+static int n_enabled = 0;
+static int n_disabled = 0;
 
 static struct pidfh *pfh = NULL;
 /* Bits for opt_flags above */
@@ -404,6 +410,19 @@ strsep_quote(char **stringp, const char *delim)
 	return (retval);
 }
 
+static volatile pid_t sighup_pid;
+static volatile pid_t sighup_uid;
+
+static void
+sighup_handler(int sig __unused,
+	       siginfo_t *si,
+	       ucontext_t *context)
+{
+	got_sighup = 1;
+	sighup_pid = si->si_pid;
+	sighup_uid = si->si_uid;
+}
+
 /*
  * Mountd server for NFS mount protocol as described in:
  * NFS: Network File System Protocol Specification, RFC1094, Appendix A
@@ -533,6 +552,7 @@ main(int argc, char **argv)
 	else
 		exnames = exnames_default;
 	openlog("mountd", LOG_PID, LOG_DAEMON);
+	syslog(LOG_NOTICE, "Started");
 	if (debug)
 		warnx("getting export list");
 	get_exportlist(0);
@@ -546,7 +566,18 @@ main(int argc, char **argv)
 		signal(SIGINT, SIG_IGN);
 		signal(SIGQUIT, SIG_IGN);
 	}
+
+#if 1
+	{
+		struct sigaction sa;
+		sa.sa_handler = (void (*)(int)) sighup_handler;
+		sigemptyset(&sa.sa_mask);
+		sa.sa_flags = SA_SIGINFO;
+		sigaction(SIGHUP, &sa, NULL);
+	}
+#else
 	signal(SIGHUP, huphandler);
+#endif
 	signal(SIGTERM, terminate);
 	signal(SIGPIPE, SIG_IGN);
 
@@ -729,6 +760,9 @@ main(int argc, char **argv)
 		curtime = curtime * 1000000 + tp.tv_nsec / 1000;
 		sigprocmask(SIG_BLOCK, &sighup_mask, &sig_mask);
 		if (got_sighup && curtime >= nexttime) {
+			syslog(LOG_NOTICE, "Reloading due to SIGHUP from pid %d [uid %d]",
+			       sighup_pid,
+			       sighup_uid);
 			got_sighup = 0;
 			sigprocmask(SIG_UNBLOCK, &sighup_mask, NULL);
 			get_exportlist(1);
@@ -1541,15 +1575,76 @@ xdr_explist_brief(XDR *xdrsp, caddr_t cp)
 	return xdr_explist_common(xdrsp, cp, 1);
 }
 
+char *cur_file = NULL;
+int cur_line = -1;
 static char *line;
 static size_t linesize;
 static FILE *exp_file;
 
+static char *dat_path = NULL;
+static char *dat_rest = NULL;
+static DBT dat_k, dat_d;
+static unsigned int dat_p = 0;
+
+static int
+get_data(DB *dbp)
+{
+	DB *sdb = (DB *) dbp;
+	int rc;
+
+	
+	if (dat_path && dat_rest && dat_p < dat_d.size) {
+		/* Handle multiple share options per path */
+		char *buf = (char *) dat_d.data;
+		int len;
+
+		while (dat_p < dat_d.size && buf[dat_p] == '\0')
+			++dat_p;
+		
+		len = strnlen(buf+dat_p, dat_d.size-dat_p);
+		if (len > 0) {
+			free(dat_rest);
+			dat_rest = strndup(buf+dat_p, len);
+			dat_p += len;
+			return 1;
+		}
+	}
+	
+	if (dat_path) {
+		free(dat_path);
+		dat_path = NULL;
+	}
+	if (dat_rest) {
+		free(dat_rest);
+		dat_rest = NULL;
+	}
+	
+	memset(&dat_k, 0, sizeof(dat_k));
+	memset(&dat_d, 0, sizeof(dat_d));
+
+	rc = sdb->seq(sdb, &dat_k, &dat_d, R_NEXT);
+	switch (rc) {
+	case 0:
+		dat_path = strndup(dat_k.data, dat_k.size);
+		dat_rest = strndup(dat_d.data, dat_d.size);
+		dat_p = strlen(dat_rest);
+		return 1;
+		
+	case 1:
+		return 0;
+		
+	default:
+		syslog(LOG_ERR, "Error reading from sharedb: %s", strerror(errno));
+		return -1;
+	}
+}
+
 /*
  * Get the export list from one, currently open file
  */
 static void
-get_exportlist_one(int passno)
+get_exportlist_one(int passno,
+		   DB *db)
 {
 	struct exportlist *ep;
 	struct grouplist *grp, *tgrp, *savgrp;
@@ -1563,14 +1658,7 @@ get_exportlist_one(int passno)
 	v4root_phase = 0;
 	anon.cr_groups = NULL;
 	dirhead = (struct dirlist *)NULL;
-	while (get_line()) {
-		if (debug)
-			warnx("got line %s", line);
-		cp = line;
-		nextfield(&cp, &endcp);
-		if (*cp == '#')
-			goto nextline;
-
+	while ((db == NULL ? get_line() : get_data(db)) > 0) {
 		/*
 		 * Set defaults.
 		 */
@@ -1585,27 +1673,66 @@ get_exportlist_one(int passno)
 		ep = (struct exportlist *)NULL;
 		dirp = NULL;
 
-		/*
-		 * Handle the V4 root dir.
-		 */
-		if (*cp == 'V' && *(cp + 1) == '4' && *(cp + 2) == ':') {
+		
+		if (db) {
+			cp = dat_path;
+			len = strlen(dat_path);
+			endcp = dat_rest;
+			
+			++n_scanned;
+			if (strncmp(dat_path, "V4:", 3) == 0) {
+				if (v4root_phase > 0) {
+					syslog(LOG_ERR,
+					       "%s: V4:duplicate entry, ignored",
+					       cur_file);
+					goto nextline;
+				}
+				v4root_phase = 1;
+
+				if (dat_path[3]) {
+					cp += 3;
+					len -= 3;
+					endcp = dat_rest;
+				} else {
+					cp = dat_rest;
+					nextfield(&cp, &endcp);
+					len = endcp-cp;
+				}
+			}
+		} else {
+			if (debug)
+				warnx("%s#%d: got line: %s", cur_file, cur_line, line);
+			cp = line;
+			nextfield(&cp, &endcp);
+			if (*cp == '#')
+				goto nextline;
+				
+			++n_scanned;
 			/*
-			 * V4: just indicates that it is the v4 root point,
-			 * so skip over that and set v4root_phase.
+			 * Handle the V4 root dir.
 			 */
-			if (v4root_phase > 0) {
-				syslog(LOG_ERR, "V4:duplicate line, ignored");
-				goto nextline;
+			if (*cp == 'V' && *(cp + 1) == '4' && *(cp + 2) == ':') {
+				/*
+				 * V4: just indicates that it is the v4 root point,
+				 * so skip over that and set v4root_phase.
+				 */
+				if (v4root_phase > 0) {
+					syslog(LOG_ERR,
+					       "%s#%d: V4:duplicate line, ignored",
+					       cur_file, cur_line);
+					goto nextline;
+				}
+				v4root_phase = 1;
+				cp += 3;
+				nextfield(&cp, &endcp);
 			}
-			v4root_phase = 1;
-			cp += 3;
-			nextfield(&cp, &endcp);
+			
+			len = endcp-cp;
 		}
 
 		/*
 		 * Create new exports list entry
 		 */
-		len = endcp-cp;
 		tgrp = grp = get_grp();
 		while (len > 0) {
 			if (len > MNTNAMLEN) {
@@ -1627,8 +1754,8 @@ get_exportlist_one(int passno)
 				goto nextline;
 			    }
 			} else if (*cp == '/') {
-			    savedc = *endcp;
-			    *endcp = '\0';
+			    savedc = cp[len];
+			    cp[len] = '\0';
 			    if (v4root_phase > 1) {
 				    if (dirp != NULL) {
 					getexp_err(ep, tgrp, "Multiple V4 dirs");
@@ -1705,7 +1832,7 @@ get_exportlist_one(int passno)
 				    "symbolic link in export path or statfs failed");
 				goto nextline;
 			    }
-			    *endcp = savedc;
+			    cp[len] = savedc;
 			} else {
 			    savedc = *endcp;
 			    *endcp = '\0';
@@ -2103,15 +2230,43 @@ read_exportfile(int passno)
 	 */
 	done = 0;
 	for (i = 0; exnames[i] != NULL; i++) {
+		char dbpath[MAXPATHLEN];
+		DB *sdb;
+
+		n_scanned  = 0;
+		n_enabled  = 0;
+		n_disabled = 0;
+		
+		snprintf(dbpath, sizeof(dbpath), "%s.db", exnames[i]);
+		sdb = dbopen(dbpath, O_RDONLY|O_SHLOCK, 0, DB_BTREE, NULL);
+		if (sdb) {
+			if (debug)
+				warnx("reading exports from DB %s", dbpath);
+			cur_file = dbpath;
+			cur_line = -1;
+			get_exportlist_one(passno, sdb);
+			sdb->close(sdb);
+			done++;
+			syslog(LOG_NOTICE, "%s: scanned %d, enabled %d, disabled %d",
+			       dbpath, n_scanned, n_enabled, n_disabled);
+			continue;
+		}
+		if (errno != ENOENT)
+			syslog(LOG_ERR, "%s: opening DB for reading: %s",
+			       dbpath, strerror(errno));
 		if (debug)
 			warnx("reading exports from %s", exnames[i]);
 		if ((exp_file = fopen(exnames[i], "r")) == NULL) {
 			syslog(LOG_WARNING, "can't open %s", exnames[i]);
 			continue;
 		}
-		get_exportlist_one(passno);
+		cur_file = exnames[i];
+		cur_line = 0;
+		get_exportlist_one(passno, NULL);
 		fclose(exp_file);
 		done++;
+		syslog(LOG_NOTICE, "%s: scanned %d, enabled %d, disabled %d",
+		       exnames[i], n_scanned, n_enabled, n_disabled);
 	}
 	if (done == 0) {
 		syslog(LOG_ERR, "can't open any exports file");
@@ -2402,6 +2557,7 @@ delete_export(struct iovec *iov, int iovlen, struct statfs *fsp, char *errmsg)
 		    "can't delete exports for %s: %m %s",
 		    fsp->f_mntonname, errmsg);
 	}
+	++n_disabled;
 }
 
 /*
@@ -2441,11 +2597,14 @@ getexp_err(struct exportlist *ep, struct grouplist *grp, const char *reason)
 	struct grouplist *tgrp;
 
 	if (!(opt_flags & OP_QUIET)) {
-		if (reason != NULL)
-			syslog(LOG_ERR, "bad exports list line '%s': %s", line,
-			    reason);
+		if (cur_line >= 0)
+			syslog(LOG_ERR, "%s#%d: bad exports list line '%s'%s%s",
+			       cur_file, cur_line, line,
+			       reason ? ": " : "", reason ? reason : "");
 		else
-			syslog(LOG_ERR, "bad exports list line '%s'", line);
+			syslog(LOG_ERR, "%s: %s: bad exports data '%s'%s%s",
+			       cur_file, dat_path, dat_rest,
+			       reason ? ": " : "", reason ? reason : "");
 	}
 	if (ep && (ep->ex_flag & EX_LINKED) == 0)
 		free_exp(ep);
@@ -3295,6 +3454,7 @@ do_mount(struct exportlist *ep, struct grouplist *grp, uint64_t exflags,
 		if (ai == NULL)
 			done = TRUE;
 	}
+	++n_enabled;
 	if (cp)
 		*cp = savedc;
 error_exit:
@@ -3498,6 +3658,7 @@ get_line(void)
 	do {
 		if ((p = fgetln(exp_file, &len)) == NULL)
 			return (0);
+		cur_line++;
 		cp = p + len - 1;
 		cont_line = 0;
 		while (cp >= p &&
@@ -3521,6 +3682,7 @@ get_line(void)
 		totlen += len;
 		line[totlen] = '\0';
 	} while (totlen == 0 || cont_line);
+
 	return (1);
 }
 
@@ -3932,7 +4094,6 @@ sa_rawaddr(struct sockaddr *sa, int *nbytes) {
 static void
 huphandler(int sig __unused)
 {
-
 	got_sighup = 1;
 }
 
