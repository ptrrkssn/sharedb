diff --git a/sys/contrib/openzfs/lib/libshare/os/freebsd/nfs.c b/sys/contrib/openzfs/lib/libshare/os/freebsd/nfs.c
index 521631c51f07..6633ecf217ba 100644
--- a/sys/contrib/openzfs/lib/libshare/os/freebsd/nfs.c
+++ b/sys/contrib/openzfs/lib/libshare/os/freebsd/nfs.c
@@ -41,6 +41,9 @@ __FBSDID("$FreeBSD$");
 #include <string.h>
 #include <unistd.h>
 #include <libintl.h>
+#include <sys/types.h>
+#include <db.h>
+#include <limits.h>
 
 #include <libshare.h>
 #include "libshare_impl.h"
@@ -51,6 +54,7 @@ __FBSDID("$FreeBSD$");
 #define	MAXLINESIZE	(PATH_MAX + OPTSSIZE)
 #define	ZFS_EXPORTS_FILE	"/etc/zfs/exports"
 #define	ZFS_EXPORTS_LOCK	ZFS_EXPORTS_FILE".lock"
+#define	ZFS_EXPORTSDB_FILE	"/etc/zfs/exports.db"
 
 /*
  * This function translates options to a format acceptable by exports(5), eg.
@@ -81,6 +85,7 @@ translate_opts(const char *shareopts, FILE *out)
 	char *o, *s = NULL;
 	unsigned int i;
 	size_t len;
+	int notfirst = 0;
 
 	strlcpy(oldopts, shareopts, sizeof (oldopts));
 	newopts[0] = '\0';
@@ -88,6 +93,10 @@ translate_opts(const char *shareopts, FILE *out)
 	while ((o = strsep(&s, "-, ")) != NULL) {
 		if (o[0] == '\0')
 			continue;
+		if (notfirst)
+			strlcat(newopts, " ", sizeof (newopts));
+		else
+			notfirst = 1;
 		for (i = 0; i < ARRAY_SIZE(known_opts); ++i) {
 			len = strlen(known_opts[i]);
 			if (strncmp(known_opts[i], o, len) == 0 &&
@@ -97,11 +106,57 @@ translate_opts(const char *shareopts, FILE *out)
 			}
 		}
 		strlcat(newopts, o, sizeof (newopts));
-		strlcat(newopts, " ", sizeof (newopts));
 	}
 	return (fputs(newopts, out));
 }
 
+static size_t
+fix_multiline(size_t size,
+	      void *data) {
+	char *buf = (char *) data;
+	char sep = 0;
+	int i = 0;
+
+	for (i = 0; i < size; i++) {
+		switch (buf[i]) {
+		case '\\':
+			if (i+1 < size)
+				++i;
+			break;
+
+		case '"':
+		case '\'':
+			if (buf[i] == sep)
+				sep = 0;
+			else
+				sep = buf[i];
+			break;
+
+		case ';':
+			if (sep)
+				++i;
+			else {
+				int j, len;
+
+				buf[i] = '\0';
+
+				/* Remove redundant leading SPC */
+				/* XXX: Test this! */
+				for (j = i+1; j < size && isspace(buf[j]); j++)
+					;
+				len = j-(i+1);
+				if (len > 0) {
+					if (j < size)
+						memcpy(buf+i+1, buf+j, size-j+1);
+					size -= len;
+				}
+			}
+			break;
+		}
+	}
+	return size;
+}
+
 static int
 nfs_enable_share_impl(sa_share_impl_t impl_share, FILE *tmpfile)
 {
@@ -132,6 +187,52 @@ nfs_enable_share_impl(sa_share_impl_t impl_share, FILE *tmpfile)
 static int
 nfs_enable_share(sa_share_impl_t impl_share)
 {
+	if (sharedb && !sharedb_wrmode) {
+                if (sharedb->close(sharedb) < 0) {
+			fprintf(stderr, "nfs_enable_share: sharedb(\"%s\")->close: %s\n",
+				ZFS_EXPORTSDB_FILE, strerror(errno));
+                        return (SA_SYSTEM_ERR);
+                }
+                sharedb = NULL;
+                sharedb_wrmode = 0;
+        }
+        if (!sharedb) {
+                sharedb = dbopen(ZFS_EXPORTSDB_FILE, O_RDWR|O_EXLOCK, 0600, DB_BTREE, NULL);
+                if (!sharedb) {
+                        if (errno != ENOENT) {
+                                fprintf(stderr, "nfs_enable_share: dbopen(\"%s\", O_RDWR|O_EXLOCK): %s\n",
+                                        ZFS_EXPORTSDB_FILE, strerror(errno));
+                                return (SA_SYSTEM_ERR);
+                        }
+                }
+        }
+	if (sharedb) {
+                DBT k, d;
+		char *shareopts = impl_share->sa_shareopts;
+		
+
+		if (strcmp(shareopts, "on") == 0)
+			shareopts = "";
+
+                sharedb_wrmode = 1;
+
+                k.data = impl_share->sa_mountpoint;
+                k.size = strlen(k.data);
+
+                d.data = translate_opts(shareopts);
+                d.size = strlen(d.data);
+
+                d.size = fix_multiline(d.size, d.data);
+
+                if (sharedb->put(sharedb, &k, &d, 0) < 0) {
+                        fprintf(stderr, "nfs_enable_share: sharedb(\"%s\")->put(\"%s\"): %s\n",
+                                ZFS_EXPORTSDB_FILE, (char *) k.data, strerror(errno));
+                        return (SA_SYSTEM_ERR);
+                }
+
+                return (SA_OK);
+        }
+
 	return (nfs_toggle_share(
 	    ZFS_EXPORTS_LOCK, ZFS_EXPORTS_FILE, NULL, impl_share,
 	    nfs_enable_share_impl));
@@ -147,6 +248,42 @@ nfs_disable_share_impl(sa_share_impl_t impl_share, FILE *tmpfile)
 static int
 nfs_disable_share(sa_share_impl_t impl_share)
 {
+	if (sharedb && !sharedb_wrmode) {
+                if (sharedb->close(sharedb) < 0) {
+			fprintf(stderr, "nfs_disable_share: sharedb(\"%s\")->close: %s\n",
+				ZFS_EXPORTSDB_FILE, strerror(errno));
+                        return (SA_SYSTEM_ERR);
+                }
+                sharedb = NULL;
+                sharedb_wrmode = 0;
+        }
+        if (!sharedb) {
+                sharedb = dbopen(ZFS_EXPORTSDB_FILE, O_RDWR|O_EXLOCK, 0600, DB_BTREE, NULL);
+                if (!sharedb) {
+                        if (errno != ENOENT) {
+                                fprintf(stderr, "nfs_disable_share: dbopen(\"%s\", O_RDWR|O_EXLOCK): %s\n",
+                                        ZFS_EXPORTSDB_FILE, strerror(errno));
+                                return (SA_SYSTEM_ERR);
+                        }
+                }
+        }
+	if (sharedb) {
+                DBT k;
+		
+                sharedb_wrmode = 1;
+
+                k.data = impl_share->sa_mountpoint;
+                k.size = strlen(k.data);
+
+                if (sharedb->del(sharedb, &k,0) < 0) {
+                        fprintf(stderr, "nfs_disable_share: sharedb(\"%s\")->del(\"%s\"): %s\n",
+                                ZFS_EXPORTSDB_FILE, (char *) k.data, strerror(errno));
+                        return (SA_SYSTEM_ERR);
+                }
+
+                return (SA_OK);
+        }
+
 	return (nfs_toggle_share(
 	    ZFS_EXPORTS_LOCK, ZFS_EXPORTS_FILE, NULL, impl_share,
 	    nfs_disable_share_impl));
@@ -155,6 +292,29 @@ nfs_disable_share(sa_share_impl_t impl_share)
 static boolean_t
 nfs_is_shared(sa_share_impl_t impl_share)
 {
+	if (!sharedb) {
+                sharedb = dbopen(ZFS_EXPORTSDB_FILE, O_RDONLY|O_SHLOCK, 0, DB_BTREE, NULL);
+                sharedb_wrmode = 0;
+                if (!sharedb && errno != ENOENT) {
+                        fprintf(stderr, "nfs_is_shared: dbopen(\"%s\", O_RDONLY|O_SHLOCK): %s\n",
+                                ZFS_EXPORTSDB_FILE, strerror(errno));
+                        return (SA_SYSTEM_ERR);
+                }
+        }
+        if (sharedb) {
+                DBT k, d;
+                int res;
+
+                k.data = mntpoint;
+                k.size = mntlen;
+
+                res = sharedb->get(sharedb, &k, &d, 0);
+                if (res < 0)
+                        fprintf(stderr, "nfs_is_shared: sharedb(\"%s\")->get(\"%s\"): %s\n",
+                                ZFS_EXPORTSDB_FILE, (char *) k.data, strerror(errno));
+                return (res == 0 ? B_TRUE : B_FALSE);
+        }
+
 	return (nfs_is_shared_impl(ZFS_EXPORTS_FILE, impl_share));
 }
 
@@ -173,13 +333,27 @@ nfs_commit_shares(void)
 {
 	struct pidfh *pfh;
 	pid_t mountdpid;
+	int res = SA_OK;
+
+	
+	if (sharedb) {
+                /* If ShareDB in use, close the database handle so any cached changes are flushed */
+                if (sharedb->close(sharedb) < 0) {
+                        fprintf(stderr, "nfs_commit_shares: sharedb(\"%s\")->close: %s\n",
+                                ZFS_EXPORTSDB_FILE, strerror(errno));
+                        res = SA_SYSTEM_ERR;
+                }
+
+                sharedb = NULL;
+                sharedb_wrmode = 0;
+        }
 
 start:
 	pfh = pidfile_open(_PATH_MOUNTDPID, 0600, &mountdpid);
 	if (pfh != NULL) {
 		/* mountd(8) is not running. */
 		pidfile_remove(pfh);
-		return (SA_OK);
+		return (res);
 	}
 	if (errno != EEXIST) {
 		/* Cannot open pidfile for some reason. */
@@ -192,12 +366,33 @@ nfs_commit_shares(void)
 	}
 	/* We have mountd(8) PID in mountdpid variable. */
 	kill(mountdpid, SIGHUP);
-	return (SA_OK);
+	return (res);
 }
 
 static void
 nfs_truncate_shares(void)
 {
+	if (sharedb) {
+		int res = SA_OK;
+		
+                /* If ShareDB in use, close the database handle so any cached changes are flushed */
+                if (sharedb->close(sharedb) < 0) {
+                        fprintf(stderr, "nfs_truncate_shares: sharedb(\"%s\")->close: %s\n",
+                                ZFS_EXPORTSDB_FILE, strerror(errno));
+                        res = SA_SYSTEM_ERR;
+                }
+
+                sharedb = NULL;
+                sharedb_wrmode = 0;
+		
+		if (truncate(ZFS_EXPORTSDB_FILE, 0) < 0) {
+                        fprintf(stderr, "nfs_truncate_shares: truncate(\"%s\"): %s\n",
+                                ZFS_EXPORTSDB_FILE, strerror(errno));
+                        res = SA_SYSTEM_ERR;
+		}
+		return (res);
+        }
+
 	nfs_reset_shares(ZFS_EXPORTS_LOCK, ZFS_EXPORTS_FILE);
 }
 
